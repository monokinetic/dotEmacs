;; basic initialization, (require) non-ELPA packages, etc.
(setq package-enable-at-startup nil)
(setq org-startup-indented t)

(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ("melpa" . "http://melpa.milkbox.net/packages/")))
(package-initialize)

;; general key mappings
(global-set-key (kbd "C-<up>") 'windmove-up) ;; Control + arrow to switch window
(global-set-key (kbd "C-<down>") 'windmove-down)
(global-set-key (kbd "C-<left>") 'windmove-left)
(global-set-key (kbd "C-<right>") 'windmove-right)
(global-set-key (kbd "C-f") 'scroll-up-command) ;; always use control + F / B to go forward back
(global-set-key (kbd "C-b") 'scroll-down-command)
;; buffer navigation using meta+left/right
;; set up as we like
(global-set-key (kbd "M-<left>") 'previous-buffer)
(global-set-key (kbd "M-<right>") 'next-buffer)

(setq evil-emacs-state-cursor '("red" box))  
(setq evil-normal-state-cursor '("blue" box))
(setq evil-visual-state-cursor '("gray" box))
(setq evil-insert-state-cursor '("gray" bar))
(setq evil-motion-state-cursor '("gray" box))

;; disable annoying prompts
(fset 'yes-or-no-p 'y-or-n-p)

;; ibuffer stuff
;; (require 'ibuffer)

;; this is from a stackoverflow thread, might not be necessary?
;; (setq ibuffer-saved-filter-groups
;;       (quote (("default"
;;               ("dired" (mode . dired-mode))
;;                ("java" (mode . java-mode))
;;                ("org" (mode . org-mode))
;;               ("sql" (mode . sql-mode))
;;                ("xml" (mode . nxml-mode))))))  ;;   ;;

;; (setq ibuffer-show-empty-filter-groups nil)

;; don't show the internal emacs buffers in ibuffer
;; (add-hook 'ibuffer-mode-hook 
;;  (lambda () 
;; (ibuffer-switch-to-saved-filter-groups "default")
;;   (ibuffer-filter-by-name "^[^*]")) ;; to show only dired and files buffers

;;Save History--------------------------------
;;Save mode-line history between sessions. Very good!
(setq savehist-additional-variables    ;; Also save ...
      '(search-ring regexp-search-ring)    ;; ... searches
      savehist-file "~/.emacs.d/savehist") ;; keep home clean
(savehist-mode t)                      ;; do this before evaluation
;;--------------------------------------------

;; sort out the word wrapping 
(global-visual-line-mode 1) ; 1 for on, 0 for off.

;; Enable control c/v by default
(cua-mode t)

;; fix work proxy
;; (setq url-proxy-services
;;      '(("no_proxy" . "^\\(localhost\\|10.*\\)")
;;	("http" . "emea-proxy.uk.oracle.com:80")
;;	("https" . "emea-proxy.uk.oracle.com:80")))

;; org-mode stuff
(require 'org)
(setq org-directory "~/Dropbox/org")
(setq org-mobile-directory "~/Dropbox/Apps/myMobOrg")
(setq org-agenda-files '("~/Dropbox/org"))

(setq org-default-notes-file "~/Dropbox/org/capture.org")
(setq org-mobile-inbox-for-pull "~/Dropbox/org/capture.org")

(setq org-refile-targets '((nil :maxlevel . 9)
			   (org-agenda-files :maxlevel . 9)))

(setq org-deadline-warning-days 10)
(setq org-enforce-todo-dependencies t)
(setq org-use-fast-todo-selection t)
(setq org-refile-allow-creating-parent-nodes t)
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-completion-use-ido t)
(setq ido-max-directory-size 100000)

(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s!)" "BLOCKED(b@/!)" "FUTURE(f)" "|" "DONE(d!)" "CANCELLED(c@)")))

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)

;; remove keybinding from org-mode
(define-key org-mode-map (kbd "M-<left>") nil)
(define-key org-mode-map (kbd "M-<right>") nil)

;; enter insert mode when adding a heading
(defun evil-append-when-insert-heading ()
  "enters insert-mode when inserting a heading"
  (interactive)
  (save-excursion
    (evil-append 1)))
(add-hook 'org-insert-heading-hook 'evil-append-when-insert-heading)


;; hook to convert from VimOrg
(defun vimorg-tag-adjust ()
  (interactive)
  (while (re-search-forward "^*.*?\n[ \t]+:[^ \t]+:" nil t)
    (if (not (string-match "\\(PROPERTIES\\|LOGBOOK\\)" (thing-at-point 'line)))
	(join-line))))

(defun vimorg-set-unmodified ()
  (interactive)
  (set-buffer-modified-p nil))

(add-hook 'org-mode-hook
	  (lambda () (interactive)(replace-regexp "\\(\\s-*\\):\\(DEADLINE\\|CLOSED\\|SCHEDULED\\|CLOCK\\|<[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} \\)" "\\1\\2")
	    (beginning-of-buffer)(vimorg-tag-adjust)
	    (beginning-of-buffer) ))


;; Fork the work (async) of pushing to mobile
;; https://gist.github.com/3111823 ASYNC org mobile push...
(require 'async) 
;; Define a timer variable
(defvar org-mobile-push-timer nil
  "Timer that `org-mobile-push-timer' used to reschedule itself, or nil.")
;; Push to mobile when the idle timer runs out
(defun org-mobile-push-with-delay (secs)
   (when org-mobile-push-timer
    (cancel-timer org-mobile-push-timer))
  (setq org-mobile-push-timer
        (run-with-idle-timer
         (* 1 secs) nil 'org-mobile-push)))
;; After saving files, start an idle timer after which we are going to push 
(add-hook 'after-save-hook 
 (lambda () 
   (if (or (eq major-mode 'org-mode) (eq major-mode 'org-agenda-mode))
     (dolist (file (org-mobile-files-alist))
       (if (string= (expand-file-name (car file)) (buffer-file-name))
           (org-mobile-push-with-delay 10)))
     )))
;; Run after midnight each day (or each morning upon wakeup?).
(run-at-time "00:01" 86400 '(lambda () (org-mobile-push-with-delay 1)))
;; Run 1 minute after launch, and once a day after that.
(run-at-time "1 min" 86400 '(lambda () (org-mobile-push-with-delay 1)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(ido-enable-flex-matching t)
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Theme stuff
(setq solarized-use-variable-pitch nil)
(setq solarized-height-minus-1 1.0) 
(setq solarized-height-plus-1 1.0) 
(setq solarized-height-plus-2 1.0) 
(setq solarized-height-plus-3 1.0) 
(setq solarized-height-plus-4 1.0) 
(load-theme 'solarized-dark t)

;; IDO
(require 'ido)
(ido-mode t)
(setq ido-everywhere t)
(require 'ido-ubiquitous)

;; (add-to-list 'load-path "~/Documents/Programming/elim/elisp")
;; (require 'garak)
;; (setq elim-executable "~/Documents/Programming/elim/elim-client")

(require 'evil)
(evil-mode 1)
;; (evil-set-initial-state 'org-capture-mode 'insert)
(add-hook 'org-capture-mode-hook 'evil-insert-state)

;; When inserting headings, jump past the clock, and properties, and content
;; of current heading.
(setq org-insert-heading-respect-content nil)

;; Alt-return normally breaks the headline if you press it in the
;; middle of a headline.  Disable that behavior
(setq org-M-RET-may-split-line nil)

(setq org-insert-heading-always-after-current 't)

(defun evil-org-heading-after-current ()
  (interactive)
  (org-insert-heading-after-current)
  (evil-insert-state)
  (end-of-line))

(defun evil-org-normal-heading ()
  (interactive)
  (org-insert-heading)
  (evil-insert-state)
  (end-of-line))

(defun evil-org-subheading-after-current ()
  (interactive)
  (org-insert-heading-after-current)
  (org-do-demote)
  (evil-insert-state)
  (end-of-line))

;; define Vim-esque keymap
;; window navigation
(define-key evil-normal-state-map (kbd "C-<up>") 'windmove-up)
(define-key evil-normal-state-map (kbd "C-<down>") 'windmove-down)
(define-key evil-normal-state-map (kbd "C-<left>") 'windmove-left)
(define-key evil-normal-state-map (kbd "C-<right>") 'windmove-right)

(evil-define-key 'normal org-mode-map
  (kbd "<tab>") 'org-cycle
  (kbd "M-L") 'org-metaright
  (kbd "M-H") 'org-metaleft
  (kbd "M-J") 'org-metadown
  (kbd "M-K") 'org-metaup
  (kbd "C-=") 'org-todo
  (kbd "C-j") 'org-forward-same-level
  (kbd "C-k") 'org-backward-same-level
  (kbd "M--") 'evil-org-heading-after-current
  (kbd "M-_") 'evil-org-subheading-after-current)

(evil-define-key 'insert org-mode-map
  (kbd "C-=") 'org-todo
  (kbd "M-l") 'org-metaright
  (kbd "M-h") 'org-metaleft
  (kbd "M-j") 'org-metadown
  (kbd "M-k") 'org-metaup
  (kbd "M--") 'evil-org-heading-after-current
  (kbd "M-_") 'evil-org-subheading-after-current)

					; the ',<num>' keys give quick and easy way to hide/reveal outline
					; structure of entire document (analogous to <shift-tab>);
(evil-define-key 'normal org-mode-map ",1" '(lambda() (interactive)(hide-sublevels 1)))
(evil-define-key 'normal org-mode-map ",2" '(lambda() (interactive)(hide-sublevels 2)))
(evil-define-key 'normal org-mode-map ",3" '(lambda() (interactive)(hide-sublevels 3)))
(evil-define-key 'normal org-mode-map ",4" '(lambda() (interactive)(hide-sublevels 4)))
(evil-define-key 'normal org-mode-map ",5" '(lambda() (interactive)(hide-sublevels 5)))
(evil-define-key 'normal org-mode-map ",6" '(lambda() (interactive)(hide-sublevels 6)))
(evil-define-key 'normal org-mode-map ",7" '(lambda() (interactive)(hide-sublevels 7)))
(evil-define-key 'normal org-mode-map ",8" '(lambda() (interactive)(hide-sublevels 8)))

					; various commands mapped below
(evil-define-key 'normal org-mode-map ",dd" 'org-deadline)
(evil-define-key 'normal org-mode-map ",ds" 'org-schedule)
(evil-define-key 'normal org-mode-map ",te" 'org-set-tags-command)
(evil-define-key 'normal org-mode-map ",ts" 'org-todo)
(evil-define-key 'normal org-mode-map ",r" 'org-refile)
(evil-define-key 'normal org-mode-map ",c" 'org-capture)
(evil-define-key 'normal org-mode-map ",ag" 'org-agenda)
(evil-define-key 'normal org-mode-map "<<" 'org-promote-subtree)
(evil-define-key 'normal org-mode-map ">>" 'org-demote-subtree)
(evil-define-key 'normal org-mode-map ">." 'org-move-subtree-down)
(evil-define-key 'normal org-mode-map "<," 'org-move-subtree-up)
(evil-define-key 'normal org-mode-map "gj" 'org-forward-heading-same-level)
(evil-define-key 'normal org-mode-map "gk" 'org-backward-heading-same-level)
(evil-define-key 'normal org-mode-map "gh" 'outline-up-heading)
(evil-define-key 'normal org-mode-map "gl" 'outline-next-visible-heading)
(evil-define-key 'normal org-mode-map ",g" 'org-goto)
(evil-define-key 'normal org-mode-map ",ex" 'org-export)
(evil-define-key 'normal org-mode-map ",ns" 'org-narrow-to-subtree)
(evil-define-key 'normal org-mode-map ",nw" 'widen)
(evil-define-key 'normal org-mode-map ",op" 'org-set-property)
(evil-define-key 'normal org-mode-map ",be" 'ibuffer)
(evil-define-key 'normal org-mode-map ",bs" 'ibuffer-other-window)
(evil-define-key 'normal org-mode-map ",m<" 'org-mobile-push)
(evil-define-key 'normal org-mode-map ",m>" 'org-mobile-pull)
(evil-define-key 'normal org-mode-map [(return)] 'org-insert-heading-respect-content)

;; esc quits
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

;; custom functions to sort out evil mode when entering orgmode headings  
(defun always-insert-item ()
  (interactive)
  (if (not (org-in-item-p))
      (insert "\n- ")
    (org-insert-item)))

;; (define-key evil-normal-state-map "O" (lambda ()
;;                      (interactive)
;;                      (end-of-line)
;;                      (org-insert-heading)
;;                      (evil-append nil)
;;                      ))

;; (define-key evil-normal-state-map "o" (lambda ()
;;                      (interactive)
;;                      (end-of-line)
;;                      (always-insert-item)
;;                      (evil-append nil)
;; 	                    ))

;; (define-key evil-normal-state-map "t" (lambda ()
;; (interactive)
;; (end-of-line)
;; (org-insert-todo-heading nil)
;; (evil-append nil)
;; ))

(define-key evil-normal-state-map (kbd "M-o") (lambda ()
						(interactive)
						(end-of-line)
						(org-insert-heading)
						(org-metaright)
						(evil-append nil)
						))
(define-key evil-normal-state-map (kbd "M-t") (lambda ()
						(interactive)
						(end-of-line)
						(org-insert-todo-heading nil)
						(org-metaright)
						(evil-append nil)
						))
;; (define-key evil-normal-state-map "T" 'org-todo) ; mark a TODO item as DONE
;; (define-key evil-normal-state-map ";a" 'org-agenda) ; access agenda buffer
(define-key evil-normal-state-map "-" 'org-cycle-list-bullet) ; change bullet style

					; allow us to access org-mode keys directly from Evil's Normal mode
;; (define-key evil-normal-state-map "L" 'org-shiftright)
;; (define-key evil-normal-state-map "H" 'org-shiftleft)
;; (define-key evil-normal-state-map "K" 'org-shiftup)
;; (define-key evil-normal-state-map "J" 'org-shiftdown)


;; Automatically open capture.org
;; (setq initial-buffer-choice "/home/dmoss/Dropbox/org/capture.org")
(setq initial-buffer-choice "~/Dropbox/org/capture.org")
